generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Player {
    id            String            @id @unique @default(cuid())
    discordId     String?
    name          String            @unique
    money         Int               @default(10)
    isAlive       Boolean           @default(true)
    isFaked       Boolean           @default(false)
    robberiesLeft Int               @default(3)
    teleports     Int               @default(3)
    lastKiaiLevel Int               @default(0)
    roles         PlayerRoles[]
    items         PlayerItems[]
    ballData      PlayerBallData?
    abilities     PlayerAbilities[]

    votedFor     Player? @relation("votedFor", fields: [votedForName], references: [name], onDelete: NoAction, onUpdate: NoAction)
    votedForName String?
    voteWorth    Int     @default(1)

    playersVotedFor Player[] @relation("votedFor")

    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?

    notes       PlayerNotes[]
    investments Investment[]

    @@index([votedForName])
    @@index([locationId])
}

model PlayerBallData {
    name     String
    avatar   String
    player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    playerId String @unique
}

model Role {
    id              String            @id @unique @default(cuid())
    name            String            @unique
    description     String
    players         PlayerRoles[]
    linkedAbilities AbilityRoleLink[]
}

model PlayerRoles {
    player     Player   @relation(fields: [playerName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    playerName String
    role       Role     @relation(fields: [roleName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    roleName   String
    assignedAt DateTime @default(now())

    @@id([playerName, roleName])
    @@index([roleName])
    @@index([playerName])
}

model Item {
    id          String        @id @unique @default(cuid())
    name        String        @unique
    price       Int
    description String
    players     PlayerItems[]

    linkedAbilities AbilityItemLink[]
}

model PlayerItems {
    player     Player   @relation(fields: [playerName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    playerName String
    item       Item     @relation(fields: [itemName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    itemName   String
    assignedAt DateTime @default(now())
    amount     Int      @default(1)

    @@id([playerName, itemName])
    @@index([playerName])
    @@index([itemName])
}

model KeyV {
    key          String   @id @unique
    value        String?
    valueInt     Int?
    valueBoolean Boolean?
}

model Ability {
    id          String @id @unique @default(cuid())
    name        String @unique
    description String

    uses         Int     @default(1)
    properties   Int     @default(0)
    customOneOff Boolean @default(false)

    linkedRoles        AbilityRoleLink[]
    linkedItems        AbilityItemLink[]
    playersWithAbility PlayerAbilities[]
}

model AbilityRoleLink {
    ability     Ability @relation(fields: [abilityName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    abilityName String
    role        Role    @relation(fields: [roleName], references: [name], onDelete: NoAction, onUpdate: NoAction)
    roleName    String

    @@id([abilityName, roleName])
    @@index([abilityName])
    @@index([roleName])
}

model AbilityItemLink {
    ability     Ability @relation(fields: [abilityName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    abilityName String
    item        Item    @relation(fields: [itemName], references: [name], onDelete: NoAction, onUpdate: NoAction)
    itemName    String

    giveWithItem      Boolean @default(false)
    subtractItemOnUse Boolean @default(false)

    @@id([abilityName, itemName])
    @@index([abilityName])
    @@index([itemName])
}

model PlayerAbilities {
    id         String @id @unique @default(cuid())
    player     Player @relation(fields: [playerName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    playerName String

    ability     Ability @relation(fields: [abilityName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    abilityName String

    usesLeft     Int
    queueEntries AbilityQueue[]

    @@unique([playerName, abilityName])
    @@index([abilityName])
}

model Location {
    id          String   @id @unique @default(cuid())
    name        String   @unique
    description String
    channel     String?  @unique
    maxPlayers  Int?
    players     Player[]
}

model PlayerNotes {
    id         String   @id @unique @default(cuid())
    player     Player   @relation(fields: [playerName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    playerName String
    note       String
    author     String
    createdAt  DateTime @default(now())

    @@index([playerName])
}

model Investment {
    id         String   @id @unique @default(cuid())
    player     Player   @relation(fields: [playerName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    playerName String
    amount     Int
    createdAt  DateTime @default(now())
    expiresAt  DateTime

    @@index([playerName])
}

model AbilityQueue {
    ability   PlayerAbilities @relation(fields: [abilityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    abilityId String          @unique
    createdAt DateTime        @default(now())
}
